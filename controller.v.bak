module controller(clk25,resetn,bullet_y1,bullet_x1,bullet_x2,bullet_y2,x_tank1,x_tank2,y_tank2,y_tank1,x,y);
input [9:0]bullet_x1,bullet_x2,x_tank1,x_tank2,x;
input [9:0]bullet_y1;bullet_y2,y_tank1,y_tank2,y;
input clk25,resetn
reg [9:0]up_addr,left_addr;
always@(posedge clk25)begin
if (!resetn) begin
                up_addr <=  10'd0;
                left_addr <= 10'd0;
                end
                
//////////////// If green bullet hits red tank output explosion///////////////////////////////////////                
           else if ((bullet_y2 >= y_tank1) && ( bullet_y2 <= (y_tank1+ 10'd31)) && 
                (bullet_x2 >= x_tank1) && ( bullet_x2 <= (x_tank1+ 10'd31)) &&
                (y >= y_tank1 ) && ( y <= (y_tank1 + 10'd31)) && 
                (x >= x_tank1 ) && ( x <= (x_tank1 + 10'd31)))
                    begin
                               explosion_addr <= explosion_addr + 1'd1;             // address for explosion BROM
                               first_screen_out <= explosion_dataOut;               // data in explosion BROM
                               green_explosion_cnt <= green_explosion_cnt + 1'd1;   // counter length of time to display explosion
                               explosion_act <= 1'd1;                               // explosion active, used to produce sound
                    end
            
/////////////// when counter reaches 60000, increment score            
           else if (green_explosion_cnt >= 19'd60000)
                begin
                    green_score <= green_score + 1'd1;
                    green_explosion_cnt <= 19'd0;
                    explosion_flag <= 1'd1;                                         // flag used to reset player locations
                    explosion_act <= 1'd0;                                          // stop outputting explosion sound
                end
///////////// when green tank reaches 3 hits, output player 1 wins//////////////
           else if (green_score == 2'd3)
                begin
                    player_screen <= 2'b01;
                    green_score <= 1'd0;
                end
        
////////// reset flag when tank locations reset/////////////////////////////////        
            else if (red_explosion_ack >= 1'd1) explosion_flag <= 1'd0;
   
//////////// reset player screen and score when screens change/////////////////   
            else if (reset_plyrScrn >= 1'd1) begin
                                        player_screen <= 2'b00;
                                        green_score <= 1'd0;
                                    end
   
   else begin
           
/////////// this displays red tank orientation ///////////////////////////////
           case (redtank_orient)
           
            ICON_UP:  if ((y == y_tank1) && (x == x_tank1)) 
                        begin
                         up_addr <=10'd0;                       // reset addresses
                         explosion_addr <= 10'd0;
                         end
                       else if ((y >= y_tank1 ) && ( y <= (y_tank1 + 10'd31)) && 
                          (x >= x_tank1 ) && ( x <= (x_tank1 + 10'd31)))
                       begin            
                               first_screen_out <= up_dataOut;   // output red tank up orientation
                               up_addr <= up_addr + 1'd1;        // increase address
                       end
            
                else begin
                        up_addr <= up_addr + 10'd0;             // if pixel location is not over tank, do nothing
                        explosion_addr <= explosion_addr;       // if not over explosion, do nothing
                    end
            ICON_DOWN: if ((y == y_tank1) && (x == x_tank1))
                        begin
                         up_addr <=10'd1023;                    // reset addresses                
                        explosion_addr <= 10'd0;                
                         end
             else if ((y >= y_tank1 ) && ( y <= (y_tank1 + 10'd31)) && 
                    (x >= x_tank1 ) && ( x <= (x_tank1 + 10'd31)))
                       begin 
                                first_screen_out <= up_dataOut;  // output red tank down orientation
                                up_addr <= up_addr - 1'd1;      // decrease address
                               
                       end
             
                else begin
                           up_addr <= up_addr + 10'd0;          // do nothing
                           explosion_addr <= explosion_addr;    // do nothing
                       end
            ICON_LEFT:   
                 if ((y == y_tank1) && (x == x_tank1)) 
                            begin
                                left_addr <=10'd0;                  // reset addresses 
                                explosion_addr <= 10'd0;
                            end
             else if ((y >= y_tank1 ) && ( y <= (y_tank1 + 10'd31)) && 
                    (x >= x_tank1 ) && ( x <= (x_tank1 + 10'd31)))
                       begin            
                               first_screen_out <= left_dataOut;    // output red tank left orientation
                               left_addr <= left_addr + 1'd1;       // increase address
                       end
            
            else begin
                            left_addr <= left_addr + 10'd0;         // do nothing
                            explosion_addr <= explosion_addr;
                    end    
            ICON_RIGHT:  
             if ((y == y_tank1) && (x == x_tank1)) 
                        begin
                            left_addr <=10'd1023;                   // reset addresses                  
                            explosion_addr <= 10'd0;
                        end               
             else if ((y >= x_tank1 ) && ( y <= (x_tank1 + 10'd31)) && 
                    (x >= y_tank1 ) && ( x <= (y_tank1 + 10'd31)))
                       begin 
                               first_screen_out <= left_dataOut;    // output red tank right orientation
                               left_addr <= left_addr - 1'd1;       // decrease address
                       end
            
            else begin
                    left_addr <= left_addr + 10'd0;                 // do nothing
                    explosion_addr <= explosion_addr;
                end            
            
            endcase
    
end

